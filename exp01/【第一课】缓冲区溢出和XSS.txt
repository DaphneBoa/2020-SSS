缓冲区溢出虽然比XSS底层，但是更难。
计算机科学的特点就是，越底层的东西，越难。
开发操作系统比开发app难多了。
所以XSS虽然比较上层，但是相对比较容易理解。
这两个也代表了二进制软件和脚本软件（包括绝大多数Web软件都是脚本软件开发的）两大技术方向。

【二进制软件和脚本软件的区别】
计算机的底层，是CPU直接执行在内存中的机器指令，
C和C++这类编程语言开发的软件，有一个过程，叫编译链接，
其实就是为了把程序变成CPU可以直接执行的二进制指令。
这类软件的一个特点，就是需要直接操作内存。
内存是所有在运行态的软件及其数据保存的地方。
内存分为细小的单元，每个单元有一个唯一的地址。
所以要访问数据，必须知道数据的地址，
要保存新的数据，就必须分配内存，获得可用的地址。
那么地址也是数，如果搞不好，不小心，计算错误了。
那么就会访问到不该访问的数据，就会造成数据的泄露或者破坏。
这就是二进制软件安全问题的根源。
二进制程序的编程，有很大的难度，就在于CPU只能做出这样了，
他是电路，是物理的东西，不可能设计得机制太复杂。
使用C语言和C++就不可避免的一个东西：直接操作内存，也就是指针。
然后在C和C++发展成熟以后，就有人去研究如何降低编程的难度，
可不可以避免程序员编程时直接操作内存，
把需要操作内存的地方，都封装起来。屏蔽在编程语言的内部。
就发明了脚本语言。
脚本语言，是干脆用C和C++这样的二进制程序开一个软件来执行一种新的程序。
也就是用软件来模拟CPU工作。
但是软件的可定制性比CPU就高多了，可以想定义什么指令就定义什么指令。
把所有需要操作内存的东西，全部封闭在执行器内部，
只给程序员接口，不给程序员操作内存的机会。
这就是对象。比如把字符串封装为string对象。
只能调用string.len()这样的方法来操作这个对象。
这样就避免了由于编程不慎造成的内存相关问题。也降低了编程难度。
所有大家看到python java js这样的程序，都有一个二进制程序的执行器。
比如python.exe java.exe Web浏览器等。
这些脚本程序的执行器，都是二进制程序。
但是，虽然这些脚本程序没有了内存相关问题，又引出了其他的问题。
比如XSS的问题。就是web程序，存在一种高交互性。
web是互联网时代的软件的基本框架，所以一定会有用户提交数据。
当初为了网页动态的需求，开发了网页的前端脚本，比如js。
直接把脚本嵌入到网页中。浏览器只要发现了script标签，就去当做脚本来执行。
把网页按照程序员的定制，变得丰富多彩，变得富于变化。
但是，恰恰另外一种需求，就是UGC软件，所谓用户产生内容。
也就是网页的内容来自于用户提交的内容，这种软件已经非常常见了。
比如BBS、博客、微博、电商、视频网站的用户评论，
都会涉及到用户提交的内容在页面上呈现。
这两种机制，放在一起就产生了神奇的效果。
当用户提交的内容里含有脚本呢？
如果直接将用户提交的内容放在页面上，那么用户提交内容中的脚本会不会被浏览器解析执行呢？
那么一个用户提交了一个脚本就可以在这个页面的所有用户主机上执行呢？
用户能提交程序执行了，怎么才能保证这个程序不是恶意的呢？
要知道，前端脚本，除了渲染页面元素这样的功能，
还有获得用户的输入跳转页面到其他地址等等丰富的功能。
只要能执行，就能干很多事情。

【课堂小实验】
首先，你需要学习编写一个简单的html文件，
这个文件只要有一个表单，用户就可以在表单中输入数据，
并向服务器提交。
下面搭建一个web服务器，再有一些简单的处理过程，就可以重现xss了。
如果这个html是放在web服务器上，用户输入了数据，点击提交，
浏览器就会把编辑框中的数据封装为一个POST请求，发现服务器。
服务器会把这个数据发给后端脚本来处理。
你可以通过定义 form 的属性来指明需要哪个脚本文件来处理。
比如PHP程序，他有一个POST超级变量，
当用户提交了数据以后，对应的php脚本的post变量就是用户提交的数据。
假设服务器现在把用户提交的数据放在user_input.html的body标签中。
然后保存在服务器文件的根目录中。
当有网站的用户访问 http://xxxx.com/user_input.html 的时候，
就会看到刚才那个表单用户提交的内容。
当然实际的情况是这两个用户可能不是同一个用户，
于是A用户提交的内容B用户就访问到了。
当服务器脚本原封不动的把用户输入的数据写到html里时，
如果用户提交的数据中包括<script>标签，就会被执行。
然后大家需要简单的学一下js语言。比如alert函数，弹出一个消息框。
既然能执行alert函数，就能执行其他功能，比如给 window.location.href 赋值，
让用户莫名其妙的跳转到另外一个网站。
实际的XSS漏洞可能很复杂，比如还会有数据库啊，登录啊等等，
但是万变不离其宗，基本原理都是这样。
*****
最简单的实验环境，就是在vscode中，安装一个php插件，
然后编写一个简单的php脚本，调试运行这个脚本。
F5 vscode会自动选择脚本运行的方式 ，把用户的表单输入写入到html文件。
再通过浏览器访问这个html文件，这就是一个最简单的xss运行环境了。

【作业】
重复该实验。
不能打折扣。
另外，编程语言也不限于php，java也可以，python也可以。




