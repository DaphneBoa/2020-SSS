大家打开 Django编写的edu_admin。
使用Django这种框架编程，第一步是定义模型，
Django会自动把定义好的模型转化为数据库表结构。
这种方式称为 ORM，上节课讲过。
所以我们在models里定义了三个类，然后执行了生成migrations和migrate。
数据库的表就建立完成，以后每次修改了models，
都需要执行makemigrations和migrate。才能将修改结果对应到数据库中。
---------------------------
下面，我们来写view。
views是Django功能实现应用功能的地方。
如果你想写一个动态的页面，就在views中定义一个函数。
这是最基本的方法。在此基本的方法上还可以有高级的，
系统内置的一些高级的数据库增删改查的方法。
最基本的views函数，是收到一个HttpRequest类型的参数，
需要返回一个HTTPResponse类型的返回值，和http协议对应。
------------------------------
下面大家在edu_admin中的views.py写入以下内容：
首先导入 from django.http import HttpResponse
然后写一个函数
def index(request):
    return HttpResponse('<html><body>OK</body></html>')
这个函数就是一个基本的 “处理请求，返回响应”。
-------------------------------
写好了以后，还没有结束。
我们还需要把这个views，对应到一个路径上。
也就是客户端如何调用这个views函数对应的功能。
因为一个实用的web app只有一个views是不够的，
可能有很多很多views。
然后我们需要把这些views对应到不懂的url上。这样客户端才能访问。
这个工作，是urls.py来完成的。
-----------------------
在 edu_admin中建一个urls.py文件，下面我们在urls.py中写如下内容：
from django.urls import path
from .views import *

urlpatterns = [
     path('index', index),
]
然后需要在主urls.py（也就是 mysite的urls.py）中包括这个url配置。
这是为了适应，可能有多个Django app共同工作的情况。
比如我们这里的edu_admin是一个app，polls又是一个app。
-------------------------------
有了以上修改，我们就可以运行我们的网站，看看效果了。
运行的话，是 pyhton manage.py runserver 命令。
也可以在vscode中调试运行。
让 在调试页面，生成一个 lanuch.json ，选python Django。
默认配置，然后就可以调试了。
Run之后访问 127.0.0.1:8000，出现404。
这个是404页面，说明我们访问的url路径并不存在。
只有 edu/ 和admin/两个路径存在。正如我们在 urls.py中配置的一样。
访问 http://127.0.0.1:8000/edu/index，出现hello world。
如果这一步有，就说明我们 urls和views配合工作成功。
用户在浏览器中输入路径，django把这个url对应到一个views函数上。
views函数处理HttpRequest。返回HttpResponse。
这个工作流程跑通。
--------------------------------------
把url对应到一个views函数的过程，专业术语叫“路由”。
注意，这个路由不是路由器的那个路由。
路由器的路由是IP层的IP数据包分发功能。
web框架的路由只是借用了这个概念，引申为 web程序中url和处理函数的对应关系。
以后我们要开发一个大型的网站，也是这么写。
注意一个url是可以带参数的。views函数也是可以带参数的。
（此处查看图片“第四课改动”系列，就是修改代码实现动态效果。）
pk就是参数，而且只允许整数。
路由系统会把这个参数赋值传递给views函数的pk参数。
------------------------------
下一步，如何在views中访问数据库。
大家改一下views.py：
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse

from .models import Score

def index(request, pk):
    return HttpResponse('<html><body>hello world %d </body></html>' % pk)

# Create your views here.

@login_required
def my_score(request):
    result = Score.objects.filter(student=request.user)
    return render(request, 'score.html', {'result': result})
这里我讲一下，如何在views函数中访问数据库。
关键在第5行和第14行。
先从models中导入模型类。
然后调用这个模型类的objects的filter方法，就完成了一次sql select。
filter函数的参数是就相当于查询的过滤条件。
我们要查询的是 student为当前登录用户的Score表的记录。
Score.objects.filter(student=request.user)
就这么写就完成了，非常的方便。
Django中，当前登录用户，就在request对象的user属性中。
views写了还不够。我们还需要修改一下模型。
Django是有默认的用户管理系统的，
用户相关的数据库表结构其实Django已经建立好了。
但是我们这里用了student表来作为系统用户。
所以我们要告诉Django不要用系统默认的用户模型了，用Student。
------------------------------------------
首先在 models.py中导入：
from django.contrib.auth.models import AbstractUser
这个是Django默认的用户管理的数据库模型。
然后继承修改之。（见图“继承修改之”。）
AbstractUser已经有很多数据库字段了，
比如密码肯定是需要以某种方式保存到数据库中的。
这些字段 AbstractUser都有了。
我们在AbstractUser的基础上，扩充几个我们要用的字段就可以了。
Student继承了AbstractUser后，
告诉Django用Student作为系统用户管理的数据库模型。
在mysite settings.py也就是整个站点的配置文件中，增加一条：
AUTH_USER_MODEL = 'edu_admin.Student'
告诉Django，使用 edu_admin 的Student作为用户管理登录授权的模型。
代码修改完以后，这里涉及到数据库修改，所以要进行数据库表结构的migrate：
python manage.py makemigrations 
python manage.py migrate
前一步生成迁移文件，后一步实施迁移。
迁移过程中，可能会要求输入一些默认值。
全部都输入为空字符串就可以。
---------------------------------
下面，我们尝试在数据库中写入一些数据，
然后测试看看Django的数据库访问是否正常。
最原始的方法就是在sqlite.exe 中用sql语句插入。
但是这个方法容易把数据搞乱了。
而且比如用户密码这样的东西，不是明文保存的。
所以插入会有问题。
我们用Django的方式，先建立一个超级用户：
python manage.py createsuperuser
建立一个管理员账户。
建立好了以后，用sqlite3.exe可以看到Student表多了一条记录。
然后我们可以用Django的admin功能，用超级管理员录入数据。
Django的admin相当于一个数据管理的超级权限后台，可以直接操作数据库。
在admin.py中录入以下内容：（见图片“在admin中录入”。）
from django.contrib import admin

# Register your models here.
from .models import Student, Course, Score

class ScoreAdmin ( admin.ModelAdmin ):
    list_display = ('course', 'score', 'student')

admin.site.register(Student)
admin.site.register(Course)
admin.site.register(Score, ScoreAdmin)
这样直接就可以生成一个管理数据库的后台页面。
（见图片“管理数据库界面”。）
访问 http://127.0.0.1:8000/admin/ 刚才新建的用户 登录后看到这个页面。
可以录入一些课程，学生，和成绩了。
--------------------------
注意事项：
本身createsuperuser时的admin也是一个学生。
录入成绩前，先录入学生和课程。
我录入以后，在数据用sql也能查询到。
为了在admin管理的时候，直接显示课程名称，
可以给course模型增加一个 __str__方法。
这样所有course对象的str ，返回的是name字段，界面显示就是课程名称了。
当数据库有了值以后，我们就可以在view中验证，
我们查询自己成绩的功能是否正常了。
views中的@login_required表示需要登录。
我们这里已经用超级管理员登录了，所以是可以访问的。
----------------------------
然后说一下 render函数。
render是一个Django内置的函数。
用于在模板文件的基础上，通过渲染得到动态的网页效果。
其中 score.html是模板，后面的{} dict是参数。
render必须传参reqeust，
然后render函数就会在模板html文件的基础上生成一个html，
并返回 HTTPResponse，所以可以直接作为 views函数的返回。
那么还需要一个score.html 在 templates目录下：
<html>
<body>
{% for i in result %}
科目： {{ i.course.name }}
成绩： {{ i.score }}
<br>
{% endfor %}
</body>
</html>
这里的result 就是 render传入的result。
对每一个result 显示其课程名和分数。
大家看到这里的多表查询 (course表中的name）直接. 就调用出来了。
模板语言的语法 {{ 变量名 }}
然后访问，应该能得到结果。（见图片“访问结果”。）
注意，写了新的views函数，需要增加url。（见图片“增加url”。）
这就完成了当前登录用户（超级管理员 admin 同学）的成绩查询。
注意，这里我们偷了一个懒，实际情况，并不是每个用户都是超级管理员。
需要有普通用户登录注册页面。
这个页面需要自己写，我们这里时间关系，
先不实现普通用户的登录，先用超级管理员用户验证一下查询功能。
实际情况下普通用户是不能访问 127.0.0.1:8000/admin页面的。
-------------------------
提问环节：
 on_delete=models.CASCADE, 这个必须要有。
用 + Add 增加数据。都没有数据怎么Change呢。
（见图片“提问环节”。）
我把  db.sqlite3 删了，再重新migrate 就可以插入了，
当然，也要再createsuperuser 一次。
-----------------------------------
还没有讲到SQL注入哈。
但是上节课让大家做了作业了。
我一会发给有SQL注入漏洞的代码给大家。
大家先预习着。
看大家能不能试出来SQL注入。
然后下周用半节课的时间解释一下。
完整代码先发给大家。（见压缩包“mysite.zip”。）
大家学习一下里面的 sql_injection.py，
这个是和Django独立的一个代码。
稍后我把代码push到github，发地址给大家。










