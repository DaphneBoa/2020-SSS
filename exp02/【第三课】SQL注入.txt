【web程序开发和web程序非常常见的一种漏洞：sql注入】

【web程序的开发】
首先，客户端（浏览器）和服务器要区分清楚。
用户使用浏览器访问服务器，服务器在云端，我们看不见，
只有一个域名对应的IP地址。浏览器通过发送请求到服务器，
服务器收到请求以后返回响应。
这里面数据的发送和接受，底层是计算机网络的东西的工作。
对web程序来说，主要关心就是这一收一发的过程，Requests and responses。
然后发送的Request，最核心的部分是一个url。就是大家通常说的网址。
其中/前的部分，是主机地址，会被解析为ip地址。
第一个/后的部分为路径和参数。会对应服务器上的文件或者功能。
然后，服务器处理完毕了，返回response，
而response一般是一个html格式的文本。
浏览器，会直接把html渲染为我们所看到的页面的不同样式。
html有自己专门的语法。
又可以嵌入js和css，用来要求浏览器执行动态的效果，
或者根据css的配置，对各种html的内部的标签和元素，显示不同的样式。
html的格式是以标签树的结构组织的。
学习html和js最好的工具就是chrome的调试模式。
有了以上的http和html的基础知识。
我们来探讨一下开发一个web程序的基本过程。
----------------------------------------------------------------------------
上周给大家演示的程序使用python内置的库开发了一个基本的http服务器端。
涉及到了刚才说的Requests and responses html 表单 get post url等基本概念。
现在的web程序一般都比较复杂，会使用数据库。
而且一般会有很多功能和页面。
为了方便web程序的开发，大家发明了一种开发web程序的基础架构。
就是把web程序开发的一些底层的东西，已经处理好了。
开发者只需要关注功能的构建就可以了。
是现在主流的开发技术，称为框架。
各种web后端编程语言，比如java、php、python都有自己的框架。
其中大家最熟悉的python现在最火的框架是Django，然后是flask。
我以django为例，演示一下，web开发的主要流程，
然后我会说sql注入的基本原理。
然后再给大家分析一下sql注入和xss在django框架下是如何被解决的。
先看这个文档：https://docs.djangoproject.com/en/3.0/
-----------------------------------------------------------------------------
第一步，我们先安装 django： pip install Django
或者 python -m pip install Django
（这里补充一个知识点，如果pip安装速度很慢，
大家可以修改pip使用的镜像源，改为国内的源，速度就会很快，
比如我图里使用的aliyun的镜像。）
然后执行 django-admin startproject mysite
cd  mysite
python manage.py startapp polls
python manage.py runserver
四个命令，构建了一个基于Django的基本框架的web应用程序。
然后大家可以访问 http://127.0.0.1:8000/看到结果。
https://docs.djangoproject.com/en/3.0/intro/tutorial01/
我刚才的操作，是Django官方文档推荐的教程。
大家在命令行里，可以看到服务器的打印输出，表示服务器收到了 request。
大家看到的页面就是框架自动返回给大家的response。
说明，request和response，请求相应的处理过程已经搭建起来了。
下面，来做一个简单的教务管理系统。争取下课前能做出来。
------------------------------------------------------------------------------------------
教务管理系统肯定要用到数据库了。
我说一下Django框架的基本编程的结构。其他的框架也差不多。
在大一的时候，给大家介绍过mvc的概念。
编写大型程序的时候，一定要做到mvc分离，m数据模型，
我们要先建立基础的底层的数据结构。
然后在处理用户输入，构建每个用户输入对应的处理函数。就是c 控制。
然后，在底层m数据模型的基础上，绘制用户界面。
比如写贪吃蛇游戏，最先做的事情，使用链表来保存蛇和食物的相应的数据，
写一些处理这个数据的函数，供上层的c和v来调用。
我们把这个叫做封装。这是基本的编程思想，和正确的工作组织流程。
大到一个复杂的大型web程序，其实底层思想还是mvc。
只是换了个名字，叫mvt。t是页面模板。
写Django的程序，或者任何框架程序，主要就是写三大部分：
第一，数据模型，models；
第二，views和url，是用户请求对应的处理程序；
第三，前端页面模板，处理完的结果如何显示的问题。
其中url部分，又称为路由，是把用户请求的url，对应到处理函数的过程。
Django的处理函数，有一个专门名称，叫views。
其基本过程就是框架收到用户的request ，其中有URL。
框架根据urls.py中的配置。将用户请求对应到一个处理函数。
一般在views.py中。
views.py中的函数，参数就是request对象，Django中是HttpRequest类。
然后views函数需要返回一个HTTPResponse类型的request。
Django把这个reqeust变化为http协议的request数据包，返回给浏览器。
一般在views的处理过程中，会访问数据库，也就是models。
models把底层的数据库操作，比如sql全部封装为了对象化的处理。
比如底层操作数据库是用sql语句，这个大家在数据的课程中学习过。
所以我们最原始的web程序，一般会程序员拼装sql语句。
但是在Django中不用。
我们把这种底层数据的封装，称为orm：Object-relational Mapper。
-------------------------------------------------------------------------------
上回用python模拟的服务器代码就等于简单的框架吗？
上次那个不是框架，是比较原始的http请求和相应过程。
框架在概念上比它多了些什么？
框架，第一把web开发流程变成了mvc结构；
第二，提供了非常多丰富的web开发过程中需要使用的库。
上次没有用到框架，是原始的http请求和响应。
原始的http请求和响应是不是也是框架的一部分？
框架处理了最基本的请求响应过程。
把请求映射到了处理函数，程序员就不用管很多麻烦的底层过程，
只需要专心业务逻辑的处理。
那框架就是这些基本请求的函数的封装的整合，我可以这样理解吗？
差不多。
-----------------------------------------------------------
下面开始编程。
问大家一个问题，使用数据库，第一步是干什么？
那我补充一下数据库的基本知识吧。
现在我们使用的数据库分两种，一种叫关系型数据库，一种叫非关系型数据库。
其中教务系统这种信息管理类的软件，一般是使用关系型数据库。
关系型数据库的基本结构是表。那如何体现“关系”呢？
关系其实是指表与表之间的关系。
首先就是设计数据库表结构。
大家想想，一个教务系统，最少需要几张表。
选课，查询成绩。
提示一下，三张表。分别是什么？
正确答案：学生信息、课程信息、选课信息。
那我们来设计一下。
class Course(models.Model):
    name = models.CharField(verbose_name='课程名',  max_length=100)
    number = models.IntegerField(verbose_name='编号', default=0)
    summary = models.CharField(verbose_name='摘要', max_length=500, null=True)

class Student(models.Model):
    class_name = models.CharField(verbose_name="班级", max_length=100, blank=True,null=True)
    phone_number = models.CharField(verbose_name='手机号', max_length=11,null=True)

class Score(models.Model):
    course = models.ForeignKey(Course, verbose_name='课程', on_delete=models.CASCADE, related_name='students')
    student = models.ForeignKey(Student, verbose_name='学生', on_delete=models.CASCADE, related_name='my_courses')
    score = models.FloatField(verbose_name='成绩',  null=True)
（详见models.py）
Django最方便的一点，就是把建表这种基本操作，编程了python中的类的定义。
所定义的这些类，直接继承models.Model。
程序员只需要写好这个models.py文件，所有的建表的操作框架就可以完成。
大家可以再建一个app ，比如叫 edu_admin。
python manage.py startapp edu_admin
code .
然后用vscode打开工程，然后在 edu_admin的models.py文件就是刚才我发送给大家的那个。
class Student(models.Model):
    class_name = models.CharField(verbose_name="班级", max_length=100, blank=True, null=True)
    name = models.CharField(verbose_name="姓名", max_length=100, blank=True, null=True)
    name = models.IntegerField(verbose_name="学号")
    phone_number = models.CharField(verbose_name='手机号', max_length=11,null=True)
修改一下 student。一共三个表，学生、课程、成绩。
其中成绩表就是学生和课程的关系，也就是选课。
成绩表中的一个记录，表示某个学生，选了某门课程。
大家注意，ForeignKey。有谁知道什么意思？
表中的每个记录，都有一个唯一的编号，称为主键。
而外键是其他表中主键记录。
通常我们用外键来记录表和表的关系。
成绩，是学生与课程的“关系”。
所以成绩表需要记录的就是某学生某门课的分数。
那学生和课程都有专门的表来记录。
我们无需在成绩表中重复记录多余的信息，只需记录id。
这个其他表中主键id，就是外键，所以外键体现了关系。
而每个表中的主键，这里没有明确说明。系统会自动增加一个id字段。
这个id每次插入记录时自动增加。
这是最终的表结构，我改了一下。
from django.db import models
from django.contrib.auth.models import AbstractUser

class Course(models.Model):
    name = models.CharField(verbose_name='课程名',  max_length=100)
    number = models.IntegerField(verbose_name='编号', default=0)
    summary = models.CharField(verbose_name='摘要', max_length=500, null=True)


class Student(models.Model):
    class_name = models.CharField(verbose_name="班级", max_length=100, blank=True, null=True)
    name = models.CharField(verbose_name="姓名", max_length=100, blank=True, null=True)
    number = models.IntegerField(verbose_name="学号", default=0)
    phone_number = models.CharField(verbose_name='手机号', max_length=11,null=True)

class Score(models.Model):
    course = models.ForeignKey(Course, verbose_name='课程', on_delete=models.CASCADE, related_name='students')
    student = models.ForeignKey(Student, verbose_name='学生', on_delete=models.CASCADE, related_name='my_courses')
    score = models.FloatField(verbose_name='成绩',  null=True)
直接放入edu_admin中的models.py。
然后，我们需要把这个表结构，真实的写入到数据库中。
也就是create table的过程。
django称为migrate。
大家打开 mysite的settings.py，在  INSTALLED_APPS 这里增加一个 edu_admin。
表示 edu_admin 这个是我们这个site的一个app。
之前startapp命令只是创建了app，必须要把app写入到这里，这个app才会被纳入到站点功能中。
然后 python .\manage.py makemigrations
python .\manage.py migrate
然后会出现一个 db.sqlite3。
文件，数据库表结构就建立完成了。
Django这里默认使用了sqlite这种简单的文件型数据库。
这种数据库的好处是不用按照，就是一个文件来保存数据的所有信息，
适合轻量级小规模的应用。但是效率和容量都有效。
一般用在开发调试环境，不用在生产环境。
（settings里加app，加了才会有刚才建的表。
加了app以后，执行makemigrations和migrate。）
makemigrations成功的标志是在app的目录下有migrations目录，
也就是我们这里的edu_admin。
链接：https://www.sqlite.org/download.html
为了验证Django真的建立了表，我们去下载一个sqlite的客户端软件，来看一下它的表结构。
Windows的同学，下载sqlite-tools-win32-x86-3310100.zip
Linux的同学直接 apt install sqlite3
（文件在本夹，sqlite3.exe）
把这个exe加入在PATH环境变量，或者放在db.sqlite，同一个目录。
然后 sqlite3.exe db.sqlite
 sqlite3.exe db.sqlite3
进入到sqlite的命令行以后 执行 .table命令。
然后可以看到所有的表，其中
这三个表是我们在models中定义的，其他表是Django自己要用的。
然后大家可以执行sql语句，插入一条记录。、
（见插入记录那张图。）
insert和select可以成功，说明表是好的。
这一步以后，其实已经可以sql注入了。
我把过程写下来发给大家。






【实验】
这里面，大家一定要做的一个实验，就是使用抓包器，
去抓取一次web访问过程中的数据包，
分析一下Requests and responses 数据的数据包格式。
可以看到在tcp数据包的payload部分是http协议数据包，
又分为了headers和body等部分。
这个实验难度不大，下来大家自己做。
------------------------------------------------------------------------------
所以，这里有第二个大家必做的实验，
就是用chrome的开发者工具的 elements、sources和network几个工具，
分析网页。如果没有做过的同学，一定要做。

【作业】
在不使用Django的情况下，我们可以使用更底层的pyhton的sqlite库来编程操作数据库。
https://docs.python.org/3/library/sqlite3.html。
大家可以在上周的httpserver.py的基础上，继续编写漏洞。
写两个页面，一个是教师录入成绩页面，一个是学生查询成绩页面。
教师录入成绩页面表单有三个字段，课程id，学生id，成绩。
录入提交以后，httpserver调用sqlite库使用sql语句写入数据库。
然后是学生查询成绩表单，学生输入学生id，课程id，httpserver使用sql语句查询成绩后返回给用户。
这里不需要做登录功能，课程也用直接输入id而不是下拉菜单的方式，或者其他选择的方式，而是直接输入id。
为了体验最原始的web的开发过程。
-------------------------
大家用原始的方式写完了以后，后面我们再讲先进的方式如何写。
以及原始的方法有什么问题，先进的方法如何规避了这些问题。